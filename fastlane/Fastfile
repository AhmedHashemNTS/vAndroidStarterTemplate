# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["SLACK_WEBHOOK_URL"] = "https://hooks.slack.com/services/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"

default_platform(:android)

platform :android do
  desc "Debug build"
  lane :buildDebug do
    begin
      gradle(task: "clean assemble", build_type: "Debug")
      on_success("Debug build Succeeded!")
    rescue => exception
      on_error(exception)
    end
  end

  desc "Release build"
  lane :buildRelease do
    begin
      gradle(task: "clean assemble", build_type: "Release")
      on_success("Release build Succeeded!")
    rescue => exception
      on_error(exception)
    end
  end

  desc "Github releases"
  lane :deploy_to_github do |options|
  assets = Dir[options[:release_dir]]
#  assets = Dir["/Users/ahmednts/Desktop/Projects/Scylla/app/build/outputs/apk/**/*.apk"]
  puts assets

  if options[:release_tag]
    begin
      github_release = set_github_release(
        repository_name: "AhmedNTS/Scylla",
        api_token: options[:api_token],
        name: options[:release_name],
        tag_name: options[:release_tag],
        commitish: options[:release_commit],
#        description: (File.read("changelog") rescue "No changelog provided"),
        upload_assets: assets
      )
#      puts options[:release_tag]
#      puts options[:release_name]
#      puts options[:release_commit]
#      puts github_release
      on_success("Deploy to github releases Succeeded!")
    rescue => exception
      on_error(exception)
    end
  end
  end

end

def on_success(success_message)
    slack(
       message: success_message,
       success: true,
       slack_url: ENV["SLACK_WEBHOOK_URL"]
    )
end

def on_error(exception)
    slack(
       message: "Something went wrong! check *Error Info* for more details.",
       success: false,
       slack_url: ENV["SLACK_WEBHOOK_URL"],
       payload: { "Error Info" => exception.to_s }
    )
end
