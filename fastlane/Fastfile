# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["CRASHLYTICS_API_TOKEN"] = "1bf9f48f478149359ed4f007d6ff8757cc7e9c4f"
ENV["CRASHLYTICS_BUILD_SECRET"] = "532ff48a3527dd5d40320c6679c7ccf8a74645c6c5a25f9bdc5cd6d15e5ff206"
ENV["SLACK_WEBHOOK_URL"] = "https://hooks.slack.com/services/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"

default_platform(:android)

platform :android do
  desc "Debug build"
  lane :buildDebug do
    begin
      gradle(task: "clean assemble", build_type: "Debug")
    rescue => exception
      on_error(exception)
    end
  end

  desc "Release build"
  lane :buildRelease do
    begin
      gradle(task: "clean assemble", build_type: "Release")
    rescue => exception
      on_error(exception)
    end
  end

  desc "Debug build then upload it to Crashlytics Beta"
  lane :beta do
    begin
      gradle(task: "clean assemble", build_type: "Debug")
      upload_beta()
      on_success("Build is successfully uploaded to the Crashlytics Beta, please check your mail and Beta app")
    rescue => exception
      on_error(exception)
    end
  end

end

#after_all do |lane|
#  on_success("Build is successfully uploaded to the Crashlytics Beta, please check your mail and Beta app")
#end

#error do |lane, exception|
#  on_error(exception)
#end

# METHODS
def upload_beta()
    crashlytics(
        api_token: ENV["CRASHLYTICS_API_TOKEN"],
        build_secret: ENV["CRASHLYTICS_BUILD_SECRET"],
#        emails: "ahmedhashemnts@gmail.com",
        groups: ['InternalQC'],
#        notes: "Scylla debug notes"
#        notes_path: "../release-notes.txt"
    )
end

def on_success(success_message)
    slack(
       message: success_message,
       success: true,
       slack_url: ENV["SLACK_WEBHOOK_URL"]
    )
end

def on_error(exception)
    slack(
       message: "Something went wrong! check *Error Info* for more details.",
       success: false,
       slack_url: ENV["SLACK_WEBHOOK_URL"],
       payload: { "Error Info" => exception.to_s }
    )
end
