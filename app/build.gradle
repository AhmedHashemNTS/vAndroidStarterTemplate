apply plugin: 'com.android.application'

//apply from: '../config/quality.gradle'

def releasePropertiesFile = rootProject.file("private/release.properties")
def releaseProperties = new Properties()
releaseProperties.load(new FileInputStream(releasePropertiesFile))

android {
  compileSdkVersion 27
  defaultConfig {
    applicationId "com.ahmednts.scylla"
    minSdkVersion 17
    targetSdkVersion 27
    versionCode 1
    versionName "1.0"
  }

  signingConfigs {
    debugConfig {
      storeFile rootProject.file("private/debug.keystore")
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
    releaseConfig {
      storeFile rootProject.file("private/release.keystore")
      storePassword releaseProperties['storePassword']
      keyAlias releaseProperties['keyAlias']
      keyPassword releaseProperties['keyPassword']
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      debuggable true
      applicationIdSuffix '.debug'

      signingConfig signingConfigs.debugConfig
    }
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      signingConfig signingConfigs.releaseConfig
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    // Don't abort if Lint finds an error, otherwise the Jenkins build
    // will be marked as failed, and Jenkins won't analyse the Lint output
    abortOnError false
    warning 'InvalidPackage'
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor' // butterknife
  }
}

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibrary}"
  //  implementation "com.android.support:design:${rootProject.ext.supportLibrary}"
  //  implementation "com.android.support:cardview-v7:${rootProject.ext.supportLibrary}"
  implementation 'com.android.support.constraint:constraint-layout:1.1.0'

  //RxJava & RxAndroid
  implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
  implementation 'io.reactivex.rxjava2:rxjava:2.1.5'

  //Networking
  implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofit}"
  implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.retrofit}"
  implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofit}"
  implementation "com.google.code.gson:gson:2.8.2"

//  implementation "com.github.bumptech.glide:glide:${rootProject.ext.glide}"
//  annotationProcessor "com.github.bumptech.glide:compiler${rootProject.ext.glide}"

  //UI
  implementation "com.jakewharton:butterknife:${rootProject.ext.butterknife}"
  annotationProcessor "com.jakewharton:butterknife-compiler:${rootProject.ext.butterknife}"

  //Utils
  implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
  implementation 'com.jakewharton.timber:timber:4.5.1'
  //  implementation "com.facebook.stetho:stetho:${rootProject.ext.stetho}"
  //  implementation "com.facebook.stetho:stetho-okhttp3:${rootProject.ext.stetho}"
  //  implementation "org.parceler:parceler-api:${rootProject.ext.parceler}"
  //  annotationProcessor "org.parceler:parceler:${rootProject.ext.parceler}"
  //  debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.ext.leakcanary}"
  //  releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.ext.leakcanary}"
  //  testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.ext.leakcanary}"

  testImplementation 'junit:junit:4.12'
}

// Logger out test results to console
tasks.matching { it instanceof Test }.all {
  testLogging.events = ["failed", "passed", "skipped"]
}